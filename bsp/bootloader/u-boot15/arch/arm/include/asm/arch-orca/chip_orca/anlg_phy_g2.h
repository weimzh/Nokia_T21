/*
 * Copyright (C) 2019 Unigroup Spreadtrum & RDA Technologies Co., Ltd.
 *
 * This file is dual-licensed: you can use it either under the terms
 * of the GPL or the X11 license, at your option. Note that this dual
 * licensing only applies to this file, and not this project as a
 * whole.
 *
 * updated at 2019-02-11 15:07:05
 *
 */


#ifndef ANLG_PHY_G2_H
#define ANLG_PHY_G2_H

#define CTL_BASE_ANLG_PHY_G2 0x63490000


#define REG_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_ANA_PCIE31_CTRL1      ( CTL_BASE_ANLG_PHY_G2 + 0x0004 )
#define REG_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_ANA_PCIE31_CTRL2      ( CTL_BASE_ANLG_PHY_G2 + 0x0008 )
#define REG_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_REG_SEL_CFG_0         ( CTL_BASE_ANLG_PHY_G2 + 0x000C )
#define REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL0             ( CTL_BASE_ANLG_PHY_G2 + 0x0010 )
#define REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL1             ( CTL_BASE_ANLG_PHY_G2 + 0x0014 )
#define REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL2             ( CTL_BASE_ANLG_PHY_G2 + 0x0018 )
#define REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL3             ( CTL_BASE_ANLG_PHY_G2 + 0x001C )
#define REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL4             ( CTL_BASE_ANLG_PHY_G2 + 0x0020 )
#define REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL5             ( CTL_BASE_ANLG_PHY_G2 + 0x0024 )
#define REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL6             ( CTL_BASE_ANLG_PHY_G2 + 0x0028 )
#define REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL7             ( CTL_BASE_ANLG_PHY_G2 + 0x002C )
#define REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL8             ( CTL_BASE_ANLG_PHY_G2 + 0x0030 )
#define REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL9             ( CTL_BASE_ANLG_PHY_G2 + 0x0034 )
#define REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL10            ( CTL_BASE_ANLG_PHY_G2 + 0x0038 )
#define REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_REG_SEL_CFG_0              ( CTL_BASE_ANLG_PHY_G2 + 0x003C )

/* REG_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_ANA_PCIE31_CTRL1 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_PIPE_RESET_N               BIT(15)
#define BIT_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_PIPE_TRIM_TXRCTL(x)        (((x) & 0xF) << 11)
#define BIT_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_PIPE_TRIM_RXRCTL(x)        (((x) & 0xF) << 7)
#define BIT_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_PIPE_TRIM_BG(x)            (((x) & 0xF) << 3)
#define BIT_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_PIPE_PS_PD_S               BIT(2)
#define BIT_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_PIPE_PS_PD_L               BIT(1)
#define BIT_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_PIPE_ISO_SW_EN             BIT(0)

/* REG_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_ANA_PCIE31_CTRL2 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_PIPE_RESERVEDIN(x)         (((x) & 0xFFFF) << 16)
#define BIT_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_PIPE_RESERVEDOUT(x)        (((x) & 0xFFFF))

/* REG_ANLG_PHY_G2_ANALOG_PCIE_GEN2_1T1R_REG_SEL_CFG_0 */

#define BIT_ANLG_PHY_G2_DBG_SEL_ANALOG_PCIE_GEN2_1T1R_PIPE_RESET_N       BIT(7)
#define BIT_ANLG_PHY_G2_DBG_SEL_ANALOG_PCIE_GEN2_1T1R_PIPE_TRIM_TXRCTL   BIT(6)
#define BIT_ANLG_PHY_G2_DBG_SEL_ANALOG_PCIE_GEN2_1T1R_PIPE_TRIM_RXRCTL   BIT(5)
#define BIT_ANLG_PHY_G2_DBG_SEL_ANALOG_PCIE_GEN2_1T1R_PIPE_TRIM_BG       BIT(4)
#define BIT_ANLG_PHY_G2_DBG_SEL_ANALOG_PCIE_GEN2_1T1R_PIPE_PS_PD_S       BIT(3)
#define BIT_ANLG_PHY_G2_DBG_SEL_ANALOG_PCIE_GEN2_1T1R_PIPE_PS_PD_L       BIT(2)
#define BIT_ANLG_PHY_G2_DBG_SEL_ANALOG_PCIE_GEN2_1T1R_PIPE_ISO_SW_EN     BIT(1)
#define BIT_ANLG_PHY_G2_DBG_SEL_ANALOG_PCIE_GEN2_1T1R_PIPE_RESERVEDIN    BIT(0)

/* REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL0 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_LOCKDONE            BIT(17)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_N(x)                (((x) & 0x7FF) << 6)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_ICP(x)              (((x) & 0x7) << 3)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_SDM_EN              BIT(2)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_MOD_EN              BIT(1)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_DIV_S               BIT(0)

/* REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL1 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_NINT(x)             (((x) & 0xFF) << 20)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_KINT(x)             (((x) & 0xFFFFF))

/* REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL2 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_DOUBLER_EN          BIT(14)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_PD                  BIT(13)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_RST                 BIT(12)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_DIVN(x)             (((x) & 0x1F) << 7)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_PREDIV              BIT(6)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_POSTDIV             BIT(5)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_REFCK_SEL(x)        (((x) & 0x7) << 2)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CLKOUTEXT_EN        BIT(1)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CLKOUTEN            BIT(0)

/* REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL3 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_SSC_DIV(x)          (((x) & 0x7))

/* REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL4 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_R2_SEL(x)           (((x) & 0x7) << 11)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_R3_SEL(x)           (((x) & 0x3) << 9)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_C2_SEL(x)           (((x) & 0x7) << 6)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_FBDIV_EN            BIT(5)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_VCOBUF_EN           BIT(4)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CP_OFFSET(x)        (((x) & 0x7) << 1)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CP_EN               BIT(0)

/* REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL5 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_BIST_CTRL(x)        (((x) & 0xFF) << 17)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_BIST_EN             BIT(16)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_BIST_CNT(x)         (((x) & 0xFFFF))

/* REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL6 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_RESERVED(x)         (((x) & 0x1FFFFF))

/* REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL7 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_KDELTA(x)           (((x) & 0xFFFF))

/* REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL8 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_KSTEP(x)            (((x) & 0x7FFFF))

/* REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL9 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_BG_RBIAS_MODE                   BIT(30)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_DUTY_FIT_EN            BIT(29)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_26MBUFFER_BIASSEL(x)   (((x) & 0x3) << 27)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_26MBUFFER_PD           BIT(26)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_26MBUFFER_TEST_EN      BIT(25)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_LDOOUT_SEL(x)          (((x) & 0x3) << 23)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_DIFF_OR_SING_SEL                BIT(22)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_LDO_TRIM(x)         (((x) & 0xF) << 18)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_KVCO_SEL(x)         (((x) & 0x7) << 15)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_VCTRLH_SEL(x)       (((x) & 0x7) << 12)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_VCTRLL_SEL(x)       (((x) & 0x7) << 9)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_VCO_TEST_EN         BIT(8)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_VCO_TEST_INT        BIT(7)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_VCO_TEST_INTSEL(x)  (((x) & 0x7) << 4)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_SHORT_CSR_EN        BIT(3)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_ALLOP_PD            BIT(2)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_TEST_VCO_PN         BIT(1)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_MANUAL_ADJ_PD       BIT(0)

/* REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_PCIEPLLH_CTRL10 */

#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CALI_MODE(x)        (((x) & 0x3) << 19)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CALI_INI(x)         (((x) & 0x1F) << 14)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CALI_TRIG           BIT(13)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CALI_WAITCNT(x)     (((x) & 0x3) << 11)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CALI_POLARITY       BIT(10)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CALI_DONE           BIT(9)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CALI_OUT(x)         (((x) & 0x1F) << 4)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CALI_CPPD           BIT(3)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CALI_VCTRL_HIGH     BIT(2)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CALI_VCTRL_LOW      BIT(1)
#define BIT_ANLG_PHY_G2_ANALOG_PCIEPLL_H_RG_PCIEPLLH_FREQ_DIFF_EN        BIT(0)

/* REG_ANLG_PHY_G2_ANALOG_PCIEPLL_H_REG_SEL_CFG_0 */

#define BIT_ANLG_PHY_G2_DBG_SEL_ANALOG_PCIEPLL_H_RG_PCIEPLLH_PD          BIT(3)
#define BIT_ANLG_PHY_G2_DBG_SEL_ANALOG_PCIEPLL_H_RG_PCIEPLLH_RST         BIT(2)
#define BIT_ANLG_PHY_G2_DBG_SEL_ANALOG_PCIEPLL_H_RG_PCIEPLLH_REFCK_SEL   BIT(1)
#define BIT_ANLG_PHY_G2_DBG_SEL_ANALOG_PCIEPLL_H_RG_PCIEPLLH_CLKOUTEN    BIT(0)


#endif /* ANLG_PHY_G2_H */


