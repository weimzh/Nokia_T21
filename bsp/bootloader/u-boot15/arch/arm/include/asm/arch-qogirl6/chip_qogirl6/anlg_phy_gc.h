/*
 * Copyright (C) 2018 Unigroup Spreadtrum & RDA Technologies Co., Ltd.
 *
 * This file is dual-licensed: you can use it either under the terms
 * of the GPL or the X11 license, at your option. Note that this dual
 * licensing only applies to this file, and not this project as a
 * whole.
 *
 ********************************************************************
 * Auto generated c code from ASIC Documentation, PLEASE DONOT EDIT *
 ********************************************************************
 */

/*
 * SVN URL      : http://shsvn06/svn/CHIP/Interface/SharkL6/Autoreg/Analog/Analog_GC Control Register.xls;Analog_GC
 *     Revision : 232386
 *     Author   : {author}
 *     Date     : {date}
 */

#ifndef __ANLG_PHY_GC_H____
#define __ANLG_PHY_GC_H____

/* Some defs, in case these are not defined elsewhere */
#ifndef SCI_IOMAP
#define SCI_IOMAP(_b_) ( (_b_) )
#endif

#ifndef SCI_ADDR
#define SCI_ADDR(_b_, _o_) ( (_b_) + (_o_) )
#endif

#ifndef CTL_ANLG_PHY_GC_BASE
#define CTL_ANLG_PHY_GC_BASE            SCI_IOMAP(0x645A0000)
#endif

/* registers definitions for CTL_ANLG_PHY_GC, 0x645A0000 */
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_CTRL0          SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0000)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_CTRL1          SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0004)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_CTRL2          SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0008)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_PERFOR         SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x000C)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_CTRL3          SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0010)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_BIST_CTRL      SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0014)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_CTRL0           SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0018)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_CTRL1           SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x001C)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_CTRL2           SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0020)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_PERFOR          SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0024)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_CTRL3           SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0028)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_BIST_CTRL       SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x002C)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CTRL0         SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0030)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CTRL1         SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0034)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CTRL2         SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0038)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_PERFOR        SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x003C)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CTRL3         SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0040)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CTRL4         SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0044)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CTRL0           SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0048)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CTRL1           SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x004C)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CTRL2           SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0050)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_PERFOR          SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0054)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CTRL3           SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0058)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_BIST_CTRL       SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x005C)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TEST_CLK_CTRL        SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0078)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CTRL4           SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x007C)
#define REG_ANLG_PHY_GC_ANALOG_PLL_TOP_REG_SEL_CFG_0        SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0080)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL0            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0084)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL1            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0088)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL2            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x008C)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL3            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0090)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL4            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0094)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL5            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0098)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL6            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x009C)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL7            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00A0)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL8            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00A4)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX0 SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00A8)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX1 SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00AC)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX2 SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00B0)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX3 SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00B4)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX4 SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00B8)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX5 SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00BC)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX6 SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00C0)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX7 SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00C4)
#define REG_ANLG_PHY_GC_ANALOG_MPLL0_REG_SEL_CFG_0          SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00C8)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL0            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00CC)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL1            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00D0)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL2            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00D4)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL3            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00D8)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL4            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00DC)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL5            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00E0)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL6            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00E4)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL7            SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00E8)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX0        SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00EC)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX1        SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00F0)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX2        SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00F4)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX3        SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00F8)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX4        SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x00FC)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX5        SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0100)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX6        SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0104)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX7        SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0108)
#define REG_ANLG_PHY_GC_ANALOG_MPLL2_REG_SEL_CFG_0          SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x010C)
#define REG_ANLG_PHY_GC_ANALOG_THM2_THM2_CTL                SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0110)
#define REG_ANLG_PHY_GC_ANALOG_THM2_THM2_RESERVED_CTL       SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0114)
#define REG_ANLG_PHY_GC_ANALOG_THM2_REG_SEL_CFG_0           SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0118)
#define REG_ANLG_PHY_GC_ANALOG_THM1_THM1_CTL                SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x011C)
#define REG_ANLG_PHY_GC_ANALOG_THM1_THM1_RESERVED_CTL       SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0120)
#define REG_ANLG_PHY_GC_ANALOG_THM1_REG_SEL_CFG_0           SCI_ADDR(CTL_ANLG_PHY_GC_BASE, 0x0124)

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_CTRL0, [0x645A0000] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_LOCK_DONE      ( BIT(18) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_REF_SEL(x)     ( (x) << 16 & (BIT(16)|BIT(17)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_N(x)           ( (x) << 5  & (BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_ICP(x)         ( (x) << 2  & (BIT(2)|BIT(3)|BIT(4)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_SDM_EN         ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_DIV_S          ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_CTRL1, [0x645A0004] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_NINT(x)        ( (x) << 23 & (BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_KINT(x)        ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_CTRL2, [0x645A0008] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_OD_TWPLL_CLKOUT_EN   ( BIT(19) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_DIV7_EN        ( BIT(18) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_DIV5_EN        ( BIT(17) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_DIV3_EN        ( BIT(16) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_DIV2_EN        ( BIT(15) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_DIV1_EN        ( BIT(14) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_POSTDIV        ( BIT(13) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_FREQ_DOUBLE_EN ( BIT(12) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_SSC_CTRL(x)    ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_MOD_EN         ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_CLKOUT_EN      ( BIT(2) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_RST            ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_PD             ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_PERFOR, [0x645A000C] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_CP_EN          ( BIT(8) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_LDO_TRIM(x)    ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_VCO_TEST_EN    ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_FBDIV_EN       ( BIT(2) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_CP_OFFSET(x)   ( (x) << 0  & (BIT(0)|BIT(1)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_CTRL3, [0x645A0010] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_IBIAS(x)       ( (x) << 14 & (BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_LPF(x)         ( (x) << 11 & (BIT(11)|BIT(12)|BIT(13)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_RESERVED(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_BIST_CTRL, [0x645A0014] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_BIST_CTRL(x)   ( (x) << 17 & (BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23)|BIT(24)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_BIST_EN        ( BIT(16) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TWPLL_BIST_CNT(x)    ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_CTRL0, [0x645A0018] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_LOCK_DONE       ( BIT(18) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_REF_SEL(x)      ( (x) << 16 & (BIT(16)|BIT(17)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_N(x)            ( (x) << 5  & (BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_ICP(x)          ( (x) << 2  & (BIT(2)|BIT(3)|BIT(4)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_SDM_EN          ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_DIV_S           ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_CTRL1, [0x645A001C] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_NINT(x)         ( (x) << 23 & (BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_KINT(x)         ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_CTRL2, [0x645A0020] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_OD_LPLL_CLKOUT_EN    ( BIT(18) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_DIV5_EN         ( BIT(17) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_DIV3_EN         ( BIT(16) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_DIV2_EN         ( BIT(15) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_DIV1_EN         ( BIT(14) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_POSTDIV         ( BIT(13) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_FREQ_DOUBLE_EN  ( BIT(12) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_SSC_CTRL(x)     ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_MOD_EN          ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_CLKOUT_EN       ( BIT(2) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_RST             ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_PD              ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_PERFOR, [0x645A0024] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_CP_EN           ( BIT(8) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_LDO_TRIM(x)     ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_VCO_TEST_EN     ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_FBDIV_EN        ( BIT(2) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_CP_OFFSET(x)    ( (x) << 0  & (BIT(0)|BIT(1)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_CTRL3, [0x645A0028] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_IBIAS(x)        ( (x) << 14 & (BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_LPF(x)          ( (x) << 11 & (BIT(11)|BIT(12)|BIT(13)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_RESERVED(x)     ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_BIST_CTRL, [0x645A002C] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_BIST_CTRL(x)    ( (x) << 17 & (BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23)|BIT(24)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_BIST_EN         ( BIT(16) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_LPLL_BIST_CNT(x)     ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CTRL0, [0x645A0030] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_LOCK_DONE     ( BIT(17) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_REF_SEL       ( BIT(16) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_N(x)          ( (x) << 5  & (BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_ICP(x)        ( (x) << 2  & (BIT(2)|BIT(3)|BIT(4)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_SDM_EN        ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_DIV_S         ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CTRL1, [0x645A0034] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_NINT(x)       ( (x) << 23 & (BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_KINT(x)       ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CTRL2, [0x645A0038] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_OD_ISPPLL_CLKOUT_EN  ( BIT(17) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_DIV3_EN       ( BIT(16) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_DIV2_EN       ( BIT(15) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_DIV1_EN       ( BIT(14) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_POSTDIV       ( BIT(13) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_FREQ_DOUBLE_EN ( BIT(12) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_SSC_CTRL(x)   ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_MOD_EN        ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CLKOUT_EN     ( BIT(2) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_RST           ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_PD            ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_PERFOR, [0x645A003C] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CP_EN         ( BIT(8) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_LDO_TRIM(x)   ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_VCO_TEST_EN   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_FBDIV_EN      ( BIT(2) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CP_OFFSET(x)  ( (x) << 0  & (BIT(0)|BIT(1)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CTRL3, [0x645A0040] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_IBIAS(x)      ( (x) << 14 & (BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_LPF(x)        ( (x) << 11 & (BIT(11)|BIT(12)|BIT(13)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_RESERVED(x)   ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_CTRL4, [0x645A0044] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_BIST_CTRL(x)  ( (x) << 17 & (BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23)|BIT(24)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_BIST_EN       ( BIT(16) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ISPPLL_BIST_CNT(x)   ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CTRL0, [0x645A0048] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_LOCK_DONE       ( BIT(17) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_REF_SEL         ( BIT(16) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_N(x)            ( (x) << 5  & (BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_ICP(x)          ( (x) << 2  & (BIT(2)|BIT(3)|BIT(4)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_SDM_EN          ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_DIV_S           ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CTRL1, [0x645A004C] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_NINT(x)         ( (x) << 23 & (BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_KINT(x)         ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CTRL2, [0x645A0050] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_OD_GPLL_CLKOUT_EN    ( BIT(14) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_POSTDIV         ( BIT(13) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_FREQ_DOUBLE_EN  ( BIT(12) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_SSC_CTRL(x)     ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_MOD_EN          ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CLKOUT_EN       ( BIT(2) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_RST             ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_PD              ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_PERFOR, [0x645A0054] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CP_EN           ( BIT(8) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_LDO_TRIM(x)     ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_VCO_TEST_EN     ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_FBDIV_EN        ( BIT(2) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CP_OFFSET(x)    ( (x) << 0  & (BIT(0)|BIT(1)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CTRL3, [0x645A0058] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_IBIAS(x)        ( (x) << 14 & (BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_LPF(x)          ( (x) << 11 & (BIT(11)|BIT(12)|BIT(13)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_RESERVED(x)     ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_BIST_CTRL, [0x645A005C] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_BIST_CTRL(x)    ( (x) << 17 & (BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23)|BIT(24)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_BIST_EN         ( BIT(16) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_BIST_CNT(x)     ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_TEST_CLK_CTRL, [0x645A0078] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TEST_CLK_EN          ( BIT(18) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_TEST_CLK_DIV(x)      ( (x) << 16 & (BIT(16)|BIT(17)) )
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ANALOG_TESTMUX(x)    ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_GPLL_CTRL4, [0x645A007C] */
#define BIT_ANLG_PHY_GC_ANALOG_PLL_TOP_ANALOG_PLL_RESERVED(x) ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_PLL_TOP_REG_SEL_CFG_0, [0x645A0080] */
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_TWPLL_REF_SEL ( BIT(20) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_TWPLL_DIV5_EN ( BIT(19) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_TWPLL_DIV3_EN ( BIT(18) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_TWPLL_DIV2_EN ( BIT(17) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_TWPLL_DIV1_EN ( BIT(16) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_TWPLL_RST    ( BIT(15) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_TWPLL_PD     ( BIT(14) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_LPLL_REF_SEL ( BIT(13) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_LPLL_DIV5_EN ( BIT(12) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_LPLL_DIV3_EN ( BIT(11) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_LPLL_DIV2_EN ( BIT(10) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_LPLL_DIV1_EN ( BIT(9) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_LPLL_RST     ( BIT(8) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_LPLL_PD      ( BIT(7) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_ISPPLL_DIV2_EN ( BIT(6) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_ISPPLL_DIV1_EN ( BIT(5) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_ISPPLL_RST   ( BIT(4) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_ISPPLL_PD    ( BIT(3) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_GPLL_CLKOUT_EN ( BIT(2) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_GPLL_RST     ( BIT(1) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_PLL_TOP_GPLL_PD      ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL0, [0x645A0084] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_LOCK_DONE        ( BIT(17) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CLKIN_SEL        ( BIT(16) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_N(x)             ( (x) << 5  & (BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_ICP(x)           ( (x) << 2  & (BIT(2)|BIT(3)|BIT(4)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_SDM_EN           ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_DIV_S            ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL1, [0x645A0088] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_NINT(x)          ( (x) << 23 & (BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_KINT(x)          ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL2, [0x645A008C] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_DIV32_EN         ( BIT(14) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_POSTDIV          ( BIT(13) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_FREQ_DOUBLE_EN   ( BIT(12) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CCS_CTRL(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_MOD_EN           ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CLKOUT_EN        ( BIT(2) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_RST              ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_PD               ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL3, [0x645A0090] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_R2_SEL(x)        ( (x) << 22 & (BIT(22)|BIT(23)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_R3_SEL(x)        ( (x) << 20 & (BIT(20)|BIT(21)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_C1_SEL(x)        ( (x) << 18 & (BIT(18)|BIT(19)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_C2_SEL(x)        ( (x) << 16 & (BIT(16)|BIT(17)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_KVCO_SEL(x)      ( (x) << 14 & (BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_VCO_TEST_INTSEL(x) ( (x) << 11 & (BIT(11)|BIT(12)|BIT(13)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_VCO_TEST_INT     ( BIT(10) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CP_EN            ( BIT(9) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_LDO_TRIM(x)      ( (x) << 5  & (BIT(5)|BIT(6)|BIT(7)|BIT(8)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_VCO_TEST_EN      ( BIT(4) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_FBDIV_EN         ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CP_OFFSET(x)     ( (x) << 1  & (BIT(1)|BIT(2)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_VCOBUF_EN        ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL4, [0x645A0094] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_RESERVED(x)      ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL5, [0x645A0098] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_BIST_CTRL(x)     ( (x) << 17 & (BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23)|BIT(24)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_BIST_EN          ( BIT(16) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_BIST_CNT(x)      ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL6, [0x645A009C] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_26MBUFFER_PD     ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL7, [0x645A00A0] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CALI_MODE(x)     ( (x) << 17 & (BIT(17)|BIT(18)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CALI_INI(x)      ( (x) << 12 & (BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CALI_TRIG        ( BIT(11) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_FREQ_DIFF_EN     ( BIT(10) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CALI_WAITCNT(x)  ( (x) << 8  & (BIT(8)|BIT(9)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CALI_POLARITY    ( BIT(7) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CALI_DONE        ( BIT(6) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CALI_OUT(x)      ( (x) << 1  & (BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CALI_CPPD        ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CTRL8, [0x645A00A4] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_VCTRLH_SEL(x)    ( (x) << 17 & (BIT(17)|BIT(18)|BIT(19)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_VCTRLL_SEL(x)    ( (x) << 14 & (BIT(14)|BIT(15)|BIT(16)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_RG_CLOSELOOP_EN  ( BIT(13) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_VCO_BANK_SEL(x)  ( (x) << 8  & (BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CALI_VCTRL_HIGH  ( BIT(7) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_CALI_VCTRL_LOW   ( BIT(6) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_VCO_BANK_SEL_OFFSET ( BIT(5) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_ADJ_MANUAL_PD    ( BIT(4) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_ISO_SW_EN        ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_TEST_CLK_EN            ( BIT(2) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_TEST_SEL               ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_26MBUFFER_CLKOUT_EN ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX0, [0x645A00A8] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_N_INDEX0(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_POSTDIV_INDEX0   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_ICP_INDEX0(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX1, [0x645A00AC] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_N_INDEX1(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_POSTDIV_INDEX1   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_ICP_INDEX1(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX2, [0x645A00B0] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_N_INDEX2(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_POSTDIV_INDEX2   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_ICP_INDEX2(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX3, [0x645A00B4] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_N_INDEX3(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_POSTDIV_INDEX3   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_ICP_INDEX3(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX4, [0x645A00B8] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_N_INDEX4(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_POSTDIV_INDEX4   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_ICP_INDEX4(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX5, [0x645A00BC] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_N_INDEX5(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_POSTDIV_INDEX5   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_ICP_INDEX5(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX6, [0x645A00C0] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_N_INDEX6(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_POSTDIV_INDEX6   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_ICP_INDEX6(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_ANANKE_BIG_DVFS_INDEX7, [0x645A00C4] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_N_INDEX7(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_POSTDIV_INDEX7   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL0_MPLL0_ICP_INDEX7(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL0_REG_SEL_CFG_0, [0x645A00C8] */
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL0_MPLL0_N        ( BIT(7) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL0_MPLL0_ICP      ( BIT(6) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL0_MPLL0_DIV32_EN ( BIT(5) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL0_MPLL0_POSTDIV  ( BIT(4) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL0_MPLL0_CLKOUT_EN ( BIT(3) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL0_MPLL0_RST      ( BIT(2) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL0_MPLL0_PD       ( BIT(1) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL0_MPLL0_26MBUFFER_PD ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL0, [0x645A00CC] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_LOCK_DONE        ( BIT(16) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_N(x)             ( (x) << 5  & (BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_ICP(x)           ( (x) << 2  & (BIT(2)|BIT(3)|BIT(4)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_SDM_EN           ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_DIV_S            ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL1, [0x645A00D0] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_NINT(x)          ( (x) << 23 & (BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_KINT(x)          ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL2, [0x645A00D4] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_DIV32_EN         ( BIT(14) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_POSTDIV          ( BIT(13) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_FREQ_DOUBLE_EN   ( BIT(12) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CCS_CTRL(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_MOD_EN           ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CLKOUT_EN        ( BIT(2) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_RST              ( BIT(1) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_PD               ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL3, [0x645A00D8] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_R2_SEL(x)        ( (x) << 22 & (BIT(22)|BIT(23)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_R3_SEL(x)        ( (x) << 20 & (BIT(20)|BIT(21)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_C1_SEL(x)        ( (x) << 18 & (BIT(18)|BIT(19)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_C2_SEL(x)        ( (x) << 16 & (BIT(16)|BIT(17)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_KVCO_SEL(x)      ( (x) << 14 & (BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_VCO_TEST_INTSEL(x) ( (x) << 11 & (BIT(11)|BIT(12)|BIT(13)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_VCO_TEST_INT     ( BIT(10) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CP_EN            ( BIT(9) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_LDO_TRIM(x)      ( (x) << 5  & (BIT(5)|BIT(6)|BIT(7)|BIT(8)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_VCO_TEST_EN      ( BIT(4) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_FBDIV_EN         ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CP_OFFSET(x)     ( (x) << 1  & (BIT(1)|BIT(2)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_VCOBUF_EN        ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL4, [0x645A00DC] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_RESERVED(x)      ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL5, [0x645A00E0] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_BIST_EN          ( BIT(24) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_BIST_CTRL(x)     ( (x) << 16 & (BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_BIST_CNT(x)      ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL6, [0x645A00E4] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CALI_MODE(x)     ( (x) << 17 & (BIT(17)|BIT(18)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CALI_INI(x)      ( (x) << 12 & (BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CALI_TRIG        ( BIT(11) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_FREQ_DIFF_EN     ( BIT(10) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CALI_WAITCNT(x)  ( (x) << 8  & (BIT(8)|BIT(9)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CALI_POLARITY    ( BIT(7) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CALI_DONE        ( BIT(6) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CALI_OUT(x)      ( (x) << 1  & (BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CALI_CPPD        ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CTRL7, [0x645A00E8] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL_CLK_JITTER_MON_EN ( BIT(26) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL_CLK_JITTER_MON_SEL(x) ( (x) << 22 & (BIT(22)|BIT(23)|BIT(24)|BIT(25)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_VCTRLH_SEL(x)    ( (x) << 19 & (BIT(19)|BIT(20)|BIT(21)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_VCTRLL_SEL(x)    ( (x) << 16 & (BIT(16)|BIT(17)|BIT(18)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_RG_CLOSELOOP_EN  ( BIT(15) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_VCO_BANK_SEL(x)  ( (x) << 10 & (BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CALI_VCTRL_HIGH  ( BIT(9) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_CALI_VCTRL_LOW   ( BIT(8) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_VCO_BANK_SEL_OFFSET ( BIT(7) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_ADJ_MANUAL_PD    ( BIT(6) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_ISO_SW_EN        ( BIT(5) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_TEST_CLK_EN            ( BIT(4) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_TEST_SEL               ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL_RESERVED_BIT2     ( BIT(2) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL_RESERVED_BIT1_0(x) ( (x) << 0  & (BIT(0)|BIT(1)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX0, [0x645A00EC] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_N_INDEX0(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_POSTDIV_INDEX0   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_ICP_INDEX0(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX1, [0x645A00F0] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_N_INDEX1(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_POSTDIV_INDEX1   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_ICP_INDEX1(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX2, [0x645A00F4] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_N_INDEX2(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_POSTDIV_INDEX2   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_ICP_INDEX2(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX3, [0x645A00F8] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_N_INDEX3(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_POSTDIV_INDEX3   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_ICP_INDEX3(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX4, [0x645A00FC] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_N_INDEX4(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_POSTDIV_INDEX4   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_ICP_INDEX4(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX5, [0x645A0100] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_N_INDEX5(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_POSTDIV_INDEX5   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_ICP_INDEX5(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX6, [0x645A0104] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_N_INDEX6(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_POSTDIV_INDEX6   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_ICP_INDEX6(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_SCU_DVFS_INDEX7, [0x645A0108] */
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_N_INDEX7(x)      ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_POSTDIV_INDEX7   ( BIT(3) )
#define BIT_ANLG_PHY_GC_ANALOG_MPLL2_MPLL2_ICP_INDEX7(x)    ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_MPLL2_REG_SEL_CFG_0, [0x645A010C] */
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL2_MPLL2_N        ( BIT(6) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL2_MPLL2_ICP      ( BIT(5) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL2_MPLL2_DIV32_EN ( BIT(4) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL2_MPLL2_POSTDIV  ( BIT(3) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL2_MPLL2_CLKOUT_EN ( BIT(2) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL2_MPLL2_RST      ( BIT(1) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_MPLL2_MPLL2_PD       ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_THM2_THM2_CTL, [0x645A0110] */
#define BIT_ANLG_PHY_GC_ANALOG_THM2_THM_RSTN                ( BIT(27) )
#define BIT_ANLG_PHY_GC_ANALOG_THM2_THM_RUN                 ( BIT(26) )
#define BIT_ANLG_PHY_GC_ANALOG_THM2_THM_PD                  ( BIT(25) )
#define BIT_ANLG_PHY_GC_ANALOG_THM2_THM_VALID               ( BIT(24) )
#define BIT_ANLG_PHY_GC_ANALOG_THM2_THM_BG_RBIAS_MODE       ( BIT(23) )
#define BIT_ANLG_PHY_GC_ANALOG_THM2_THM_TEST_SEL(x)         ( (x) << 21 & (BIT(21)|BIT(22)) )
#define BIT_ANLG_PHY_GC_ANALOG_THM2_THM_BP_MODE             ( BIT(20) )
#define BIT_ANLG_PHY_GC_ANALOG_THM2_THM_DATA(x)             ( (x) << 10 & (BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)) )
#define BIT_ANLG_PHY_GC_ANALOG_THM2_THM_BP_DATA(x)          ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_THM2_THM2_RESERVED_CTL, [0x645A0114] */
#define BIT_ANLG_PHY_GC_ANALOG_THM2_THM_RESERVED(x)         ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_THM2_REG_SEL_CFG_0, [0x645A0118] */
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_THM2_THM_RSTN        ( BIT(3) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_THM2_THM_RUN         ( BIT(2) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_THM2_THM_PD          ( BIT(1) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_THM2_THM_RESERVED    ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_THM1_THM1_CTL, [0x645A011C] */
#define BIT_ANLG_PHY_GC_ANALOG_THM1_THM_RSTN                ( BIT(27) )
#define BIT_ANLG_PHY_GC_ANALOG_THM1_THM_RUN                 ( BIT(26) )
#define BIT_ANLG_PHY_GC_ANALOG_THM1_THM_PD                  ( BIT(25) )
#define BIT_ANLG_PHY_GC_ANALOG_THM1_THM_VALID               ( BIT(24) )
#define BIT_ANLG_PHY_GC_ANALOG_THM1_THM_BG_RBIAS_MODE       ( BIT(23) )
#define BIT_ANLG_PHY_GC_ANALOG_THM1_THM_TEST_SEL(x)         ( (x) << 21 & (BIT(21)|BIT(22)) )
#define BIT_ANLG_PHY_GC_ANALOG_THM1_THM_BP_MODE             ( BIT(20) )
#define BIT_ANLG_PHY_GC_ANALOG_THM1_THM_DATA(x)             ( (x) << 10 & (BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)) )
#define BIT_ANLG_PHY_GC_ANALOG_THM1_THM_BP_DATA(x)          ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_THM1_THM1_RESERVED_CTL, [0x645A0120] */
#define BIT_ANLG_PHY_GC_ANALOG_THM1_THM_RESERVED(x)         ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_GC_ANALOG_THM1_REG_SEL_CFG_0, [0x645A0124] */
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_THM1_THM_RSTN        ( BIT(3) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_THM1_THM_RUN         ( BIT(2) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_THM1_THM_PD          ( BIT(1) )
#define BIT_ANLG_PHY_GC_DBG_SEL_ANALOG_THM1_THM_RESERVED    ( BIT(0) )

/* vars definitions for controller CTL_ANLG_PHY_GC */


#endif /* __ANLG_PHY_GC_H____ */
