/*
 * Copyright (C) 2018 Unigroup Spreadtrum & RDA Technologies Co., Ltd.
 *
 * This file is dual-licensed: you can use it either under the terms
 * of the GPL or the X11 license, at your option. Note that this dual
 * licensing only applies to this file, and not this project as a
 * whole.
 *
 ********************************************************************
 * Auto generated c code from ASIC Documentation, PLEASE DONOT EDIT *
 ********************************************************************
 */

#ifndef __ANLG_PHY_G1_H____
#define __ANLG_PHY_G1_H____

/* Some defs, in case these are not defined elsewhere */
#ifndef SCI_IOMAP
#define SCI_IOMAP(_b_) ( (_b_) )
#endif

#ifndef SCI_ADDR
#define SCI_ADDR(_b_, _o_) ( (_b_) + (_o_) )
#endif

#ifndef CTL_ANLG_PHY_G1_BASE
#define CTL_ANLG_PHY_G1_BASE            SCI_IOMAP(0x403C0000)
#endif

/* registers definitions for CTL_ANLG_PHY_G1, 0x403C0000 */
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_GPIO_CLK_CTRL        SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0008)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_CTRL0          SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x000C)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_CTRL1          SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0010)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_CTRL2          SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0014)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_BIST_CTRL      SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0018)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_CTRL0           SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x001C)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_CTRL1           SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0020)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_CTRL2           SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0024)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_BIST_CTRL       SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0028)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_CTRL0           SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x002C)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_CTRL1           SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0030)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_CTRL2           SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0034)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_BIST_CTRL       SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0038)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_IPPLL_CTRL0          SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x003C)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_IPPLL_CTRL1          SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0040)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_IPPLL_CTRL2          SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0044)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_IPPLL_BIST_CTRL      SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0048)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_TEST_SSC_CTRL        SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x004C)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_ANA_PLL_RSVD         SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0050)
#define REG_ANLG_PHY_G1_ANALOG_PLL_TOP_ANA_PLL_DUMY         SCI_ADDR(CTL_ANLG_PHY_G1_BASE, 0x0054)

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_GPIO_CLK_CTRL, [0x403C0008] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPIO_CLK_IN_CTRL     ( BIT(3) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPIO_CLK_OUT_CTRL(x) ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_CTRL0, [0x403C000C] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_N(x)           ( (x) << 8  & (BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_IBIAS(x)       ( (x) << 6  & (BIT(6)|BIT(7)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_LPF(x)         ( (x) << 3  & (BIT(3)|BIT(4)|BIT(5)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_SDM_EN         ( BIT(2) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_MOD_EN         ( BIT(1) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_DIV_S          ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_CTRL1, [0x403C0010] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_NINT(x)        ( (x) << 23 & (BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_KINT(x)        ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_CTRL2, [0x403C0014] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_RESERVED(x)    ( (x) << 3  & (BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_CK2DSI_EN      ( BIT(2) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_CLKOUT_EN      ( BIT(1) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_DIV1_EN        ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_BIST_CTRL, [0x403C0018] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_BIST_EN        ( BIT(16) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_BIST_CNT(x)    ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_CTRL0, [0x403C001C] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_N(x)            ( (x) << 8  & (BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_IBIAS(x)        ( (x) << 6  & (BIT(6)|BIT(7)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_LPF(x)          ( (x) << 3  & (BIT(3)|BIT(4)|BIT(5)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_SDM_EN          ( BIT(2) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_MOD_EN          ( BIT(1) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_DIV_S           ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_CTRL1, [0x403C0020] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_NINT(x)         ( (x) << 23 & (BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_KINT(x)         ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_CTRL2, [0x403C0024] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_RESERVED(x)     ( (x) << 2  & (BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_CLKOUT_EN       ( BIT(1) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_DIV1_EN         ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_BIST_CTRL, [0x403C0028] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_BIST_EN         ( BIT(16) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_BIST_CNT(x)     ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_CTRL0, [0x403C002C] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_N(x)            ( (x) << 9  & (BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_IBIAS(x)        ( (x) << 7  & (BIT(7)|BIT(8)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_LPF(x)          ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_SDM_EN          ( BIT(3) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_MOD_EN          ( BIT(2) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_DIV_S           ( BIT(1) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_REF_SEL         ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_CTRL1, [0x403C0030] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_NINT(x)         ( (x) << 23 & (BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_KINT(x)         ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_CTRL2, [0x403C0034] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_RESERVED(x)     ( (x) << 1  & (BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_POSTDIV         ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_BIST_CTRL, [0x403C0038] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_BIST_EN         ( BIT(16) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_BIST_CNT(x)     ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_IPPLL_CTRL0, [0x403C003C] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_N(x)            ( (x) << 9  & (BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_IBIAS(x)        ( (x) << 7  & (BIT(7)|BIT(8)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_LPF(x)          ( (x) << 4  & (BIT(4)|BIT(5)|BIT(6)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_SDM_EN          ( BIT(3) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_MOD_EN          ( BIT(2) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_DIV_S           ( BIT(1) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_REF_SEL         ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_IPPLL_CTRL1, [0x403C0040] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_NINT(x)         ( (x) << 23 & (BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_KINT(x)         ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_IPPLL_CTRL2, [0x403C0044] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_RESERVED(x)     ( (x) << 3  & (BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_CLKOUT_EN       ( BIT(2) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_POSTDIV         ( BIT(1) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_DIV1_EN         ( BIT(0) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_IPPLL_BIST_CTRL, [0x403C0048] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_BIST_EN         ( BIT(16) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_BIST_CNT(x)     ( (x) << 0  & (0x0000FFFF) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_TEST_SSC_CTRL, [0x403C004C] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_TWPLL_SSC_CTRL(x)    ( (x) << 24 & (BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)|BIT(30)|BIT(31)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_LPLL_SSC_CTRL(x)     ( (x) << 16 & (BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_GPLL_SSC_CTRL(x)     ( (x) << 8  & (BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_IPLL_SSC_CTRL(x)     ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_ANA_PLL_RSVD, [0x403C0050] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_ANALOG_PLL_RESERVED(x) ( (x) << 0  & (BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)) )

/* bits definitions for REG_ANLG_PHY_G1_ANALOG_PLL_TOP_ANA_PLL_DUMY, [0x403C0054] */
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_ANALOG_PLL_DUMY_IN(x) ( (x) << 16 & (0xFFFF0000) )
#define BIT_ANLG_PHY_G1_ANALOG_PLL_TOP_ANALOG_PLL_DUMY_OUT(x) ( (x) << 0  & (0x0000FFFF) )

/* vars definitions for controller CTL_ANLG_PHY_G1 */


#endif /* __ANLG_PHY_G1_H____ */
